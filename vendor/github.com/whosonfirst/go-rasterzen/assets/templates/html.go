// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xdb\x30\x0c\x86\xef\x79\x0a\xc2\x17\x27\x68\x2a\x35\x35\x96\x06\xa9\x9d\x61\xb7\x0d\x0b\x86\x1d\x86\x1d\x36\x0c\x03\x67\x31\x93\x5a\x29\x16\x24\xc1\x8d\x6b\xf8\xdd\x07\x45\x4e\x96\xdc\x7a\x13\xf9\xf3\xa3\x49\xfe\x2e\x65\x30\x7a\x33\x01\x28\x25\xa1\x88\x0f\x80\x32\xa8\xa0\x69\xe3\xd0\x07\x72\xa2\xe4\x29\x9c\x24\x4d\xab\xfd\x33\x38\xd2\x55\xe6\x43\xa7\xc9\x4b\xa2\x90\x81\x74\xb4\xab\x32\x5e\x7b\xcf\x47\x8c\xd5\xde\x67\xc0\x37\x11\x7a\x23\xa9\x09\x77\x9a\xc2\x89\x4c\x94\xaf\x9d\xb2\x01\xbc\xab\xab\x8c\x3f\x61\x8b\x29\x71\x2e\x7e\xf2\xd9\xa6\xe4\x29\xf9\x36\xe4\x56\xa2\x97\xd7\xdc\x71\xc8\x78\x04\x7e\xba\x42\x0c\xfe\x34\xa2\x1b\x5b\x0a\xd5\x82\x12\x55\x66\xd0\x46\x4c\xa8\x36\x09\x97\x1f\x4c\x19\x80\x16\x1d\xa0\x55\xbf\x9f\xa9\x83\x0a\xf2\xbe\x07\xf6\x85\x0e\xe1\x95\xf6\x1f\xbe\x7e\xfa\x4c\x1d\x0c\x43\xfe\x78\x51\xbb\x6b\x9c\xc1\x10\x4b\x7d\xfb\x37\x7f\x9c\x5c\x48\x06\x2d\x54\xb0\x65\x06\xed\x34\x37\x68\xf3\x19\xf3\x14\xbe\x2b\x7a\x99\xfe\x2c\x1e\xd8\x72\x51\xac\xde\xad\xe6\x70\xbb\xb8\xbf\x67\xc5\x43\xb1\x5c\xfe\x9a\xc3\xa2\x98\x5d\x76\xd7\xd8\x91\x3b\x36\x09\x4a\xd3\x36\x46\xd3\x5c\x86\x60\xd7\x9c\xeb\xa6\x46\x2d\x1b\x1f\xd6\xab\xbb\xd5\x1d\xcf\xe1\xe6\x34\xcc\x0d\xe4\xbc\x7f\x1d\x78\x7f\x18\x78\xdf\x0d\xec\x5a\x7a\x3f\xae\x57\xc5\xf4\xf8\x9e\x43\x6f\xf0\xf0\xa3\x69\xcc\x1a\x16\xcb\x61\x76\xde\xe3\x38\x00\x43\x21\xbe\x35\x53\x83\xf6\x2c\xc4\xe1\xa2\x13\x50\xc1\x9e\x5e\x60\xcb\x3e\xa2\x97\x63\x05\xfc\xbf\xed\x95\xb5\x47\x8b\x92\x2d\x25\x4f\x7f\xee\xbf\x00\x00\x00\xff\xff\xe3\xc6\xf5\x47\xc1\x02\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 705, mode: os.FileMode(420), modTime: time.Unix(1541184523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

